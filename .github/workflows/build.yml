name: Build
on: [push]
jobs:
  build:
    strategy:
      matrix:
        rust: [stable, nightly]
        os: [ubuntu-latest, windows-latest]

    defaults:
      run:
        shell: bash

    env:
      CARGO_HOME: ${{ github.workspace }}/.cargo

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - id: versions
        run: |
          echo "rust=$(rustc --version 2>&1|sed -E 's/^rustc [[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+ \(([[:digit:][:lower:]]+) [[:digit:]]+-[[:digit:]]+-[[:digit:]]+\)$/\1/')" >> $GITHUB_OUTPUT
          echo "yarncachedir=$(yarn cache dir)" >> $GITHUB_OUTPUT 
          cat $GITHUB_OUTPUT
        shell: bash

      - uses: actions/cache/restore@v3
        id: rust-cache
        if: github.run_attempt == 1
        with:
          path: |
            .cargo/bin/
            .cargo/registry/index/
            .cargo/registry/cache/
            .cargo/git/db/
            .cargo/.crates.toml
            .cargo/.crates2.json
            src-tauri/target/
          key: rust-${{ runner.os }}-${{ steps.versions.outputs.rust }}-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions/cache@v3
        with:
          path: |
            ${{ steps.versions.outputs.yarncachedir }}
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock')}}

      - uses: GuillaumeFalourd/setup-windows10-sdk-action@v1.11
        if: matrix.os == 'windows-latest'

      - run: sudo apt update && sudo apt install libwebkit2gtk-4.0-dev build-essential curl wget file libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev
        if: matrix.os == 'ubuntu-latest'

      - uses: hecrj/setup-rust-action@v2
        with:
          rust-version: ${{ matrix.rust }}-x86_64-pc-windows-gnu
        if: matrix.os == 'windows-latest'

      - uses: hecrj/setup-rust-action@v2
        with:
          rust-version: ${{ matrix.rust }}
        if: matrix.os == 'ubuntu-latest'

      - uses: rui314/setup-mold@v1

      - run: cargo install tauri-cli
        if: steps.rust-cache.outputs.cache-hit != 'true'
      - run: yarn install

      - run: cargo tauri build
        env:
          RUST_BACKTRACE: full

      - if: matrix.os == 'ubuntu-latest'
        run: |
          mv src-tauri/target/release/bundle/deb/filespider_*.deb filespider-${{matrix.rust}}.deb
          mv src-tauri/target/release/bundle/appimage/filespider_*.AppImage filespider-${{matrix.rust}}.AppImage

      - uses: actions/upload-artifact@v3
        if: matrix.os == 'ubuntu-latest'
        with:
          path: filespider-${{matrix.rust}}.deb
      - uses: actions/upload-artifact@v3
        if: matrix.os == 'ubuntu-latest'
        with:
          path: filespider-${{matrix.rust}}.AppImage

      - if: matrix.os == 'windows-latest'
        run: |
          ls src-tauri/target/release/bundle/{msi,nsis} 
          mv src-tauri/target/release/bundle/msi/filespider_*.msi filespider-${{matrix.rust}}.msi
          mv src-tauri/target/release/bundle/nsis/filespider_*-setup.exe filespider-${{matrix.rust}}.exe

      - uses: actions/upload-artifact@v3
        if: matrix.os == 'windows-latest'
        with:
          path: filespider-${{matrix.rust}}.msi
      - uses: actions/upload-artifact@v3
        if: matrix.os == 'windows-latest'
        with:
          path: filespider-${{matrix.rust}}.exe

      - uses: actions/cache/save@v3
        with:
          path: |
            .cargo/bin/
            .cargo/registry/index/
            .cargo/registry/cache/
            .cargo/git/db/
            src-tauri/target/
          key: rust-${{ runner.os }}-${{ steps.versions.outputs.rust }}-${{ hashFiles('**/Cargo.lock') }}
