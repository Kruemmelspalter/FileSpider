name: CI

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

jobs:
  frontend:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [lts/*]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup node env 🏗
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          check-latest: true

      - name: Get yarn cache directory path 🛠
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache node_modules 📦
        uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: cd frontend && yarn

      - name: Run linter
        run: cd frontend && make lint

      - name: Run tests
        run: cd frontend && yarn test --passWithNoTests

  backend:
    runs-on: ${{ matrix.os }}
  
    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [lts/*]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache gradle
        uses: actions/cache@v3
        id: gradle-cache
        with:
          path: backend/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('backend/app/build.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      
      - name: Run linter
        run: cd backend && make lint

      - name: Run tests
        run: cd backend && ./gradlew test

    push:
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [ubuntu-latest]
                node: [lts/*]
                    
        steps:
            - uses: actions/checkout@v3
            - run: echo ${{ secrets.GH_PAT }} | docker login ghcr.io -u ${{ secrets.GH_USERNAME }} --password-stdin
            - run: make push
